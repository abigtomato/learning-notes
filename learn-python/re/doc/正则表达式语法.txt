1.普通字符:
    字母，数字，汉字，下划线以及没有特殊意义的标点符号都是普通字符
    正则中匹配字符串时，普通字符匹配与之相同的一个字符

2.转义字符:
    \n  代表换行符
    \t  制表符
    \\  代表\本身
    \^  \$  \.  \(  \)  \{  \}  \?  \+  \*  \|  \[  \]  匹配这些字符本身

3.标准字符集合:
    \d  匹配0-9中任意数字
    \w  匹配任意字母数字下划线，a-z A-Z 0-9 _
    \s  匹配空格，制表符，换行符等空白字符任意一个
    .   匹配任意一个字符(除换行符)，如果要匹配包括"\n"在内的所有字符，一般用[\s\S]

4.自定义字符集合:
    [ab5@]      匹配a或b或5或@任意一个
    [^abc]      匹配a，b，c这3个字符之外的任意一个
    [f-k]       匹配f~k之间任意一个
    [^A-F0-3]   匹配A~F，0~3之外的任意一个

5.量词(Quantifier):
    {n}     前面的表达式重复n次
    {m,n}   前面的表达式至少重复m次，最多重复n次
    {m,}    前面的表达式至少重复m次
    ?       前面的表达式出现0或1次，相当于{0,1}
    +       前面的表达式至少出现1次，相当于{1,}
    *       前面的表达式不出现或出现任意次，相当于{0,}

6.贪婪非贪婪:
    匹配次数中的贪婪模式(匹配字符越多越好，默认)
    匹配次数中的非贪婪模式(匹配字符越少越好，修饰匹配次数的特殊符号后再加上一个"?"号)

7.字符边界:
    ^   匹配的字符串开头
    $   匹配的字符串结尾
    \b  匹配一个单词边界(前面的字符和后面的字符不全是\w)

8.选择符和分组:
    1.|分支结构:
        左右两边表达式之间存在"或"的关系，匹配左边或者右边
    2.()捕获组:
        1.在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰
        2.取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到
        3.每一对括号会分配一个编号，使用()的捕获根据左括号的顺序从1开始自动编号，
          捕获元素编号为零的第一个捕获是由整个正则表达式模式匹配的文本
    3.(?:Expression)非捕获组:
        一些表达式中，不得不使用()，但又不需要保存()中子表达式匹配的内容，
        这时可以用非捕获组来抵消使用()带来的副作用

9.反向引用(\num):
    每一对()会分配一个编号，使用()的捕获根据左括号的顺序从1开始自动编号，
    通过反向引用，可以对分组已捕获的字符串进行引用

10.分组别名:
    (?P<name>)  分组起别名
    (?P=name)   引用别名为name的分组匹配到的字符串

11.预搜索(零宽断言):
    (?=exp)     断言自身出现的位置的后面能匹配表达式exp
    (?<=exp)    断言自身出现的位置的前面能匹配表达式exp
    (?!exp)     断言此位置的后面不能匹配表达式exp
    (?<!exp)    断言此位置的前面不能匹配表达式exp